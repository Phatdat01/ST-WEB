@model IEnumerable<Book.Models.trongnam_Result>
@{
    ViewBag.Title = "Chart3";
    Layout = "~/Views/Shared/ViewAdmin.cshtml";
}

<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <title>Thống kê</title>

    <style>
        .form-change__nam {
            border: 2px solid #999;
            display: block;
            width: 80%;
            padding: 20px;
            margin: 10px auto;
            border-radius: 10px;
        }

        .form-div {
            align-items: center;
            display: inline-flex;
            justify-content: space-between;
            margin: 10px 10px;
        }

        .current-year {
            width: 200px;
            height: 40px;
            margin-left: 50px;
            padding: 5px 10px;
            outline: none;
            border-radius: 5px;
        }

        .current-year__label {
            text-align: center;
            font-size: 20px;
            color: #000;
            margin-left: 50px;
        }

        .btn.btn-theme {
            float: right;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
            padding: 0;
            margin: 0;
            background-color: #ffffff;
        }

        #chartdiv {
            width: 85%;
            height: 75vh;
            margin: 10px 20px;
        }

        h3 {
            text-align: center;
            margin: 10px;
        }

        .btn.btn-success {
            position: absolute;
            top: 17.5%;
            padding: 9px 20px;
            left: 70%;
        }
    </style>
    <link rel="stylesheet" href="~/Content/responsive.css" />
</head>

<body>
    @foreach (var item in Model)
    {
        <div style="display:none" class="chart-money">
            <input class="total-money" type="text" value=" @Html.DisplayFor(modelItem => item.tong)" />
            <input class="date-money" type="text" value=" @Html.DisplayFor(modelItem => item.thang)" />

        </div>

    }

    <form action="/DonHangs/Chart3" class="form-change__nam" method="post">
        @Html.AntiForgeryToken()
        <div class="form-div">
            <label class="current-year__label">Chọn năm: </label>
            <select class="current-year btn-danger" name="year">
                @{
                    foreach (var item in ViewBag.time)
                    {

                        <option value="@item"> @item</option>
                    }

                }

            </select>
        </div>
        <div class="form-div">

            <select class="current-year btn-warning" name="type">
                <option value="doanhthu"> Thông kê theo doanh thu</option>
                <option value="soluong"> Thông kê theo số lượng</option>

            </select>
        </div>
        <input type="submit" class="btn btn-success" value="Thống kê" />
    </form>
    <h3><i class="fa fa-angle-right"></i> Thống kê trong năm @ViewBag.year</h3>
    <div id="chartdiv"></div>
    <script src="~/Content/js/indexchart.js"></script>
    <script src="~/Content/js/xy.js"></script>
    <script src="~/Content/js/animate.js"></script>
    <script>

        function daysInMonth(month, year) {
            return new Date(year, month, 0).getDate();
        }
        var charMoneyArr = document.querySelectorAll('.chart-money');
        var kq = Array.from(charMoneyArr).reduce(function (callback, input) {

            var obj = {};
            var inputMoney = input.querySelector('.total-money').value.trim();
            var inputDate = input.querySelector('.date-money').value.trim();
            var inputYear = document.querySelector('.current-year').value.trim();


            obj.date = new Date(inputYear + "-" + inputDate + "-" + daysInMonth(parseInt(inputDate), parseInt(inputYear))).getTime();
            obj.value = parseInt(inputMoney) / 1000;
            obj.bulletSettings = {
                visible: true
            };
            callback.push(obj)

            return callback;

        }, [])

        var root = am5.Root.new("chartdiv");

        root.setThemes([
            am5themes_Animated.new(root)
        ]);


        var chart = root.container.children.push(
            am5xy.XYChart.new(root, {
                panX: true,
                panY: true,
                wheelX: "panX",
                wheelY: "zoomX"
            })
        );

        chart.get("colors").set("step", 3);

        var cursor = chart.set("cursor", am5xy.XYCursor.new(root, {}));
        cursor.lineY.set("visible", false);

        var xAxis = chart.xAxes.push(
            am5xy.DateAxis.new(root, {
                maxDeviation: 0.3,
                baseInterval: {
                    timeUnit: "day",
                    count: 1
                },
                renderer: am5xy.AxisRendererX.new(root, {}),
                tooltip: am5.Tooltip.new(root, {})
            })
        );

        var yAxis = chart.yAxes.push(
            am5xy.ValueAxis.new(root, {
                maxDeviation: 0.3,
                renderer: am5xy.AxisRendererY.new(root, {})
            })
        );


        // Create series
        // https://www.amcharts.com/docs/v5/charts/xy-chart/series/
        var series = chart.series.push(am5xy.LineSeries.new(root, {
            name: "Series 1",
            xAxis: xAxis,
            yAxis: yAxis,
            valueYField: "value",
            valueXField: "date",
            tooltip: am5.Tooltip.new(root, {
                labelText: "Doanh thu (triệu đồng): {valueY}"
            })
        }));
        series.strokes.template.setAll({
            strokeWidth: 2,
            strokeDasharray: [3, 3]
        });

        series.bullets.push(function () {
            var container = am5.Container.new(root, {
                templateField: "bulletSettings"
            });
            var circle0 = container.children.push(am5.Circle.new(root, {
                radius: 5,
                fill: am5.color(0xff0000)
            }));
            var circle1 = container.children.push(am5.Circle.new(root, {
                radius: 5,
                fill: am5.color(0xff0000)
            }));

            circle1.animate({
                key: "radius",
                to: 20,
                duration: 1000,
                easing: am5.ease.out(am5.ease.cubic),
                loops: Infinity
            });
            circle1.animate({
                key: "opacity",
                to: 0,
                from: 1,
                duration: 1000,
                easing: am5.ease.out(am5.ease.cubic),
                loops: Infinity
            });

            return am5.Bullet.new(root, {
                sprite: container
            })
        })



        series.data.setAll(kq);


        // Make stuff animate on load
        // https://www.amcharts.com/docs/v5/concepts/animations/#Forcing_appearance_animation
        series.appear(1000);
        chart.appear(1000, 100);
    </script>
</body>

</html>